---
import {
  getLangFromUrl,
  useTranslatedFragment,
  useTranslations,
} from '../../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translateFragment = useTranslatedFragment(lang);
---

<nav
  class="absolute md:relative md:flex max-md:left-0 max-md:top-24 w-full h-[calc(100dvh_-_6rem)] md:h-fit md:w-fit justify-center items-center group-[.menu--toggle]/content:max-md:visible max-md:invisible group-[.menu--toggle]/content:max-md:opacity-100 max-md:opacity-0 [transition:transform_200ms_ease-in-out,opacity_200ms_ease-in-out] text-xl"
>
  <div
    id="nav__container"
    class="flex flex-col flex-wrap md:flex-row md:font-light font-medium text-xl md:text-lg xl:text-xl h-full w-full z-50 items-center justify-evenly md:gap-8"
  >
    <ul id="nav-list" class="group/list nav__list">
      <li id="nav-home" title={t('nav.home')} class="group nav__item">
        <a
          class="item__link"
          href={translateFragment('#home')}
          aria-label={t('nav.home')}
          data-astro-prefetch
        >
          {t('nav.home')}
        </a>
        <div class={'item__bar'}></div>
      </li>
      <li id="nav-about" title={t('nav.about')} class="group nav__item">
        <a
          class="item__link"
          href={translateFragment('#about')}
          aria-label={t('nav.about')}
          data-astro-prefetch
        >
          {t('nav.about')}
        </a>
        <div class={'item__bar'}></div>
      </li>
      <li id="nav-projects" title={t('nav.projects')} class="group nav__item">
        <a
          class="item__link"
          href={translateFragment('#projects')}
          aria-label={t('nav.projects')}
          data-astro-prefetch
        >
          {t('nav.projects')}
        </a>
        <div class={'item__bar'}></div>
      </li>
    </ul>
    <a
      class="md:hover:text-mint rounded-sm py-2 px-4 border-2 md:border-mint md:hover:border-mint md:hover:shadow-mint hover:-translate-x-1 hover:-translate-y-1 hover:shadow-[3px_3px_0_0] md:shadow-mint md:text-mint [transition:transform_300ms_ease-in-out,box-shadow_300ms_ease-in-out] text-frame hover:text-frame border-frame hover:border-frame hover:shadow-frame font-medium md:font-light text-xl md:text-lg xl:text-xl max-md:mb-4"
      href="/resume.pdf"
      target="_blank"
      aria-label={t('resume')}
      data-astro-reload>{t('resume')}</a
    >
  </div>
</nav>

<style>
  @tailwind base;
  @tailwind components;
  @tailwind utilities;

  @layer components {
    .nav__list {
      @apply flex flex-col md:flex-row gap-6 items-center justify-center max-md:mb-10;
    }

    .nav__item {
      @apply flex flex-col h-8 w-fit [direction:rtl];
      &:hover {
        @apply [direction:ltr];
      }
    }

    .item__bar {
      @apply w-0 group-hover:md:!w-full group-hover/list:md:w-0 bg-frame md:bg-mintHover [transition:width_300ms_ease-in-out] h-[2px] group-[.item--selected]:md:bg-mint;
    }

    .item__link {
      @apply block text-center whitespace-nowrap max-md:text-frame max-md:hover:text-selection;
    }
  }

  @layer utilities {
    .item--selected {
      @apply [direction:ltr] group-hover/list:[direction:rtl] hover:![direction:ltr];
      & .item__bar {
        @apply w-full;
      }
      & .item__link {
        @apply md:font-extrabold font-black pointer-events-none;
      }
    }
  }
</style>

<script>
  const sections = document.querySelectorAll('section');
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        const navEntry = document.querySelector(`#nav-${entry.target.id}`);
        if (entry.isIntersecting) {
          navEntry?.classList.add('item--selected');
        } else {
          navEntry?.classList.remove('item--selected');
        }
      });
    },
    {
      root: null,
      rootMargin: `-40% 0px -50% 0px`,
      threshold: [0.01],
    }
  );
  for (let i = 0; i < sections.length; i++) {
    const elements = sections[i];

    observer.observe(elements);
  }
</script>
<script>
  const content = document.querySelector('#content');
  const menuToggleBtn = document.getElementById('menu-toggle-btn');
  const navLinks = document.querySelectorAll('.item__link');
  const svgAnimation: (HTMLElement & SVGAnimationElement) | null =
    document.getElementById('reverseAnimation') as HTMLElement &
      SVGAnimationElement;

  navLinks?.forEach((link) => {
    link.addEventListener('click', () => {
      content?.classList.remove('menu--toggle');
      svgAnimation?.beginElement();
    });
  });
  menuToggleBtn?.addEventListener('click', () => {
    content?.classList.toggle('menu--toggle');
  });

  window.addEventListener('resize', () => {
    if (window.matchMedia('(min-width: 768px)').matches) {
      content?.classList.remove('menu--toggle');
      svgAnimation?.beginElement();
    }
  });
</script>
